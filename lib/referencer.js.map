{"version":3,"sources":["../src/referencer.js"],"names":["traverseIdentifierInPattern","options","rootPattern","referencer","callback","visitor","PatternVisitor","visit","rightHandNodes","forEach","Importer","declaration","id","specifier","visitPattern","pattern","currentScope","__define","Definition","Variable","ImportBinding","node","local","visitImport","name","esrecurse","Visitor","Referencer","scopeManager","parent","isInnerMethodDefinition","__currentScope","block","__close","previous","iterationNode","__nestTDZScope","visitVariableDeclaration","TDZ","left","__nestForScope","letOrConstDecl","declarations","__referencing","Reference","WRITE","right","assignments","maybeImplicitGlobal","init","scope","assignment","processRightHandNodes","type","Syntax","FunctionDeclaration","FunctionName","FunctionExpression","__nestFunctionExpressionNameScope","__nestFunctionScope","i","iz","params","info","ParameterDefinition","rest","referencingDefaultValue","length","argument","body","BlockStatement","visitChildren","close","ClassDeclaration","ClassName","superClass","__nestClassScope","computed","key","isMethodDefinition","MethodDefinition","pushInnerMethodDefinition","value","popInnerMethodDefinition","VariableDeclaration","kind","materializeTDZScope","materializeIterationScope","isStrict","variableTargetScope","index","fromTDZ","decl","topLevel","isPattern","operator","RW","__nestCatchScope","param","CatchClause","__nestGlobalScope","__isNodejsScope","__isES6","isModule","__nestModuleScope","isStrictModeSupported","isImpliedStrict","object","property","visitProperty","visitClass","__ignoreEval","callee","Identifier","variableScope","__detectEval","__nestBlockScope","__detectThis","__nestWithScope","discriminant","__nestSwitchScope","cases","cse","visitFunction","visitForIn","importer","source","visitExportDeclaration"],"mappings":";;;;;;;AAuBA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,SAASA,2BAAT,CAAqCC,OAArC,EAA8CC,WAA9C,EAA2DC,UAA3D,EAAuEC,QAAvE,EAAiF;AAC7E;AACA,MAAMC,OAAO,GAAG,IAAIC,uBAAJ,CAAmBL,OAAnB,EAA4BC,WAA5B,EAAyCE,QAAzC,CAAhB;AACAC,EAAAA,OAAO,CAACE,KAAR,CAAcL,WAAd,EAH6E,CAK7E;;AACA,MAAIC,UAAU,IAAI,IAAlB,EAAwB;AACpBE,IAAAA,OAAO,CAACG,cAAR,CAAuBC,OAAvB,CAA+BN,UAAU,CAACI,KAA1C,EAAiDJ,UAAjD;AACH;AACJ,C,CAED;AACA;AACA;AACA;AACA;;;IAEMO,Q;;;;;AACF,oBAAYC,WAAZ,EAAyBR,UAAzB,EAAqC;AAAA;;AAAA;;AACjC,8BAAM,IAAN,EAAYA,UAAU,CAACF,OAAvB;AACA,UAAKU,WAAL,GAAmBA,WAAnB;AACA,UAAKR,UAAL,GAAkBA,UAAlB;AAHiC;AAIpC;;;;WAED,qBAAYS,EAAZ,EAAgBC,SAAhB,EAA2B;AAAA;;AACvB,WAAKV,UAAL,CAAgBW,YAAhB,CAA6BF,EAA7B,EAAiC,UAACG,OAAD,EAAa;AAC1C,QAAA,MAAI,CAACZ,UAAL,CAAgBa,YAAhB,GAA+BC,QAA/B,CAAwCF,OAAxC,EACI,IAAIG,sBAAJ,CACIC,kBAASC,aADb,EAEIL,OAFJ,EAGIF,SAHJ,EAII,MAAI,CAACF,WAJT,EAKI,IALJ,EAMI,IANJ,CADJ;AASH,OAVD;AAWH;;;WAED,kCAAyBU,IAAzB,EAA+B;AAC3B,UAAMC,KAAK,GAAID,IAAI,CAACC,KAAL,IAAcD,IAAI,CAACT,EAAlC;;AACA,UAAIU,KAAJ,EAAW;AACP,aAAKC,WAAL,CAAiBD,KAAjB,EAAwBD,IAAxB;AACH;AACJ;;;WAED,gCAAuBA,IAAvB,EAA6B;AACzB,UAAMC,KAAK,GAAID,IAAI,CAACC,KAAL,IAAcD,IAAI,CAACT,EAAlC;AACA,WAAKW,WAAL,CAAiBD,KAAjB,EAAwBD,IAAxB;AACH;;;WAED,yBAAgBA,IAAhB,EAAsB;AAClB,UAAMC,KAAK,GAAID,IAAI,CAACC,KAAL,IAAcD,IAAI,CAACT,EAAlC;;AACA,UAAIS,IAAI,CAACG,IAAT,EAAe;AACX,aAAKD,WAAL,CAAiBF,IAAI,CAACG,IAAtB,EAA4BH,IAA5B;AACH,OAFD,MAEO;AACH,aAAKE,WAAL,CAAiBD,KAAjB,EAAwBD,IAAxB;AACH;AACJ;;;;EAxCkBI,mBAAUC,O,GA2CjC;;;IACqBC,U;;;;;AACjB,sBAAY1B,OAAZ,EAAqB2B,YAArB,EAAmC;AAAA;;AAAA;;AAC/B,gCAAM,IAAN,EAAY3B,OAAZ;AACA,WAAKA,OAAL,GAAeA,OAAf;AACA,WAAK2B,YAAL,GAAoBA,YAApB;AACA,WAAKC,MAAL,GAAc,IAAd;AACA,WAAKC,uBAAL,GAA+B,KAA/B;AAL+B;AAMlC;;;;WAED,wBAAe;AACX,aAAO,KAAKF,YAAL,CAAkBG,cAAzB;AACH;;;WAED,eAAMV,IAAN,EAAY;AACR,aAAO,KAAKL,YAAL,MAAuBK,IAAI,KAAK,KAAKL,YAAL,GAAoBgB,KAA3D,EAAkE;AAC9D,aAAKJ,YAAL,CAAkBG,cAAlB,GAAmC,KAAKf,YAAL,GAAoBiB,OAApB,CAA4B,KAAKL,YAAjC,CAAnC;AACH;AACJ;;;WAED,mCAA0BE,uBAA1B,EAAmD;AAC/C,UAAMI,QAAQ,GAAG,KAAKJ,uBAAtB;AACA,WAAKA,uBAAL,GAA+BA,uBAA/B;AACA,aAAOI,QAAP;AACH;;;WAED,kCAAyBJ,uBAAzB,EAAkD;AAC9C,WAAKA,uBAAL,GAA+BA,uBAA/B;AACH;;;WAED,6BAAoBT,IAApB,EAA0Bc,aAA1B,EAAyC;AACrC;AACA;AACA,WAAKP,YAAL,CAAkBQ,cAAlB,CAAiCf,IAAjC,EAAuCc,aAAvC;;AACA,WAAKE,wBAAL,CAA8B,KAAKrB,YAAL,EAA9B,EAAmDG,kBAASmB,GAA5D,EAAiEH,aAAa,CAACI,IAA/E,EAAqF,CAArF,EAAwF,IAAxF;AACH;;;WAED,mCAA0BlB,IAA1B,EAAgC;AAAA;;AAC5B;AACA,WAAKO,YAAL,CAAkBY,cAAlB,CAAiCnB,IAAjC;;AACA,UAAMoB,cAAc,GAAGpB,IAAI,CAACkB,IAA5B;AACA,WAAKF,wBAAL,CAA8B,KAAKrB,YAAL,EAA9B,EAAmDG,kBAASA,QAA5D,EAAsEsB,cAAtE,EAAsF,CAAtF;AACA,WAAK3B,YAAL,CAAkB2B,cAAc,CAACC,YAAf,CAA4B,CAA5B,EAA+B9B,EAAjD,EAAqD,UAACG,OAAD,EAAa;AAC9D,QAAA,MAAI,CAACC,YAAL,GAAoB2B,aAApB,CAAkC5B,OAAlC,EAA2C6B,mBAAUC,KAArD,EAA4DxB,IAAI,CAACyB,KAAjE,EAAwE,IAAxE,EAA8E,IAA9E,EAAoF,IAApF;AACH,OAFD;AAGH;;;WAED,iCAAwB/B,OAAxB,EAAiCgC,WAAjC,EAA8CC,mBAA9C,EAAmEC,IAAnE,EAAyE;AACrE,UAAMC,KAAK,GAAG,KAAKlC,YAAL,EAAd;AACA+B,MAAAA,WAAW,CAACtC,OAAZ,CAAoB,UAAA0C,UAAU,EAAI;AAC9BD,QAAAA,KAAK,CAACP,aAAN,CACI5B,OADJ,EAEI6B,mBAAUC,KAFd,EAGIM,UAAU,CAACL,KAHf,EAIIE,mBAJJ,EAKIjC,OAAO,KAAKoC,UAAU,CAACZ,IAL3B,EAMIU,IANJ;AAOH,OARD;AASH;;;WAED,sBAAa5B,IAAb,EAAmBpB,OAAnB,EAA4BG,QAA5B,EAAsC;AAClC,UAAI,OAAOH,OAAP,KAAmB,UAAvB,EAAmC;AAC/BG,QAAAA,QAAQ,GAAGH,OAAX;AACAA,QAAAA,OAAO,GAAG;AAAEmD,UAAAA,qBAAqB,EAAE;AAAzB,SAAV;AACH;;AACDpD,MAAAA,2BAA2B,CACvB,KAAKC,OADkB,EAEvBoB,IAFuB,EAGvBpB,OAAO,CAACmD,qBAAR,GAAgC,IAAhC,GAAuC,IAHhB,EAIvBhD,QAJuB,CAA3B;AAKH;;;WAED,uBAAciB,IAAd,EAAoB;AAAA;;AAChB;AACA;AACA;AACA;AACA;AACA,UAAIA,IAAI,CAACgC,IAAL,KAAcC,mBAAOC,mBAAzB,EAA8C;AAC1C;AACA,aAAKvC,YAAL,GAAoBC,QAApB,CAA6BI,IAAI,CAACT,EAAlC,EACI,IAAIM,sBAAJ,CACIC,kBAASqC,YADb,EAEInC,IAAI,CAACT,EAFT,EAGIS,IAHJ,EAII,IAJJ,EAKI,IALJ,EAMI,IANJ,CADJ;AASH,OAjBe,CAmBhB;AACA;;;AACA,UAAIA,IAAI,CAACgC,IAAL,KAAcC,mBAAOG,kBAArB,IAA2CpC,IAAI,CAACT,EAApD,EAAwD;AACpD,aAAKgB,YAAL,CAAkB8B,iCAAlB,CAAoDrC,IAApD;AACH,OAvBe,CAyBhB;;;AACA,WAAKO,YAAL,CAAkB+B,mBAAlB,CAAsCtC,IAAtC,EAA4C,KAAKS,uBAAjD,EA1BgB,CA4BhB;;;AA5BgB,iCA6BP8B,CA7BO,EA6BAC,EA7BA;AA8BZ,QAAA,MAAI,CAAC/C,YAAL,CAAkBO,IAAI,CAACyC,MAAL,CAAYF,CAAZ,CAAlB,EAAkC;AAAER,UAAAA,qBAAqB,EAAE;AAAzB,SAAlC,EAAmE,UAACrC,OAAD,EAAUgD,IAAV,EAAmB;AAClF,UAAA,MAAI,CAAC/C,YAAL,GAAoBC,QAApB,CAA6BF,OAA7B,EACI,IAAIiD,+BAAJ,CACIjD,OADJ,EAEIM,IAFJ,EAGIuC,CAHJ,EAIIG,IAAI,CAACE,IAJT,CADJ;;AAQA,UAAA,MAAI,CAACC,uBAAL,CAA6BnD,OAA7B,EAAsCgD,IAAI,CAAChB,WAA3C,EAAwD,IAAxD,EAA8D,IAA9D;AACH,SAVD;AA9BY;;AA6BhB,WAAK,IAAIa,CAAC,GAAG,CAAR,EAAWC,EAAE,GAAGxC,IAAI,CAACyC,MAAL,CAAYK,MAAjC,EAAyCP,CAAC,GAAGC,EAA7C,EAAiD,EAAED,CAAnD,EAAsD;AAAA,cAA7CA,CAA6C,EAAtCC,EAAsC;AAYrD,OAzCe,CA2ChB;;;AACA,UAAIxC,IAAI,CAAC4C,IAAT,EAAe;AACX,aAAKnD,YAAL,CAAkB;AACduC,UAAAA,IAAI,EAAE,aADQ;AAEde,UAAAA,QAAQ,EAAE/C,IAAI,CAAC4C;AAFD,SAAlB,EAGG,UAAClD,OAAD,EAAa;AACZ,UAAA,MAAI,CAACC,YAAL,GAAoBC,QAApB,CAA6BF,OAA7B,EACI,IAAIiD,+BAAJ,CACIjD,OADJ,EAEIM,IAFJ,EAGIA,IAAI,CAACyC,MAAL,CAAYK,MAHhB,EAII,IAJJ,CADJ;AAOH,SAXD;AAYH,OAzDe,CA2DhB;;;AACA,UAAI9C,IAAI,CAACgD,IAAL,CAAUhB,IAAV,KAAmBC,mBAAOgB,cAA9B,EAA8C;AAC1C,aAAKC,aAAL,CAAmBlD,IAAI,CAACgD,IAAxB;AACH,OAFD,MAEO;AACH,aAAK9D,KAAL,CAAWc,IAAI,CAACgD,IAAhB;AACH;;AAED,WAAKG,KAAL,CAAWnD,IAAX;AACH;;;WAED,oBAAWA,IAAX,EAAiB;AACb,UAAIA,IAAI,CAACgC,IAAL,KAAcC,mBAAOmB,gBAAzB,EAA2C;AACvC,aAAKzD,YAAL,GAAoBC,QAApB,CAA6BI,IAAI,CAACT,EAAlC,EACI,IAAIM,sBAAJ,CACIC,kBAASuD,SADb,EAEIrD,IAAI,CAACT,EAFT,EAGIS,IAHJ,EAII,IAJJ,EAKI,IALJ,EAMI,IANJ,CADJ;AASH,OAXY,CAab;;;AACA,WAAKd,KAAL,CAAWc,IAAI,CAACsD,UAAhB;;AAEA,WAAK/C,YAAL,CAAkBgD,gBAAlB,CAAmCvD,IAAnC;;AAEA,UAAIA,IAAI,CAACT,EAAT,EAAa;AACT,aAAKI,YAAL,GAAoBC,QAApB,CAA6BI,IAAI,CAACT,EAAlC,EACI,IAAIM,sBAAJ,CACIC,kBAASuD,SADb,EAEIrD,IAAI,CAACT,EAFT,EAGIS,IAHJ,CADJ;AAMH;;AACD,WAAKd,KAAL,CAAWc,IAAI,CAACgD,IAAhB;AAEA,WAAKG,KAAL,CAAWnD,IAAX;AACH;;;WAED,uBAAcA,IAAd,EAAoB;AAChB,UAAIa,QAAJ;;AACA,UAAIb,IAAI,CAACwD,QAAT,EAAmB;AACf,aAAKtE,KAAL,CAAWc,IAAI,CAACyD,GAAhB;AACH;;AAED,UAAMC,kBAAkB,GAAG1D,IAAI,CAACgC,IAAL,KAAcC,mBAAO0B,gBAAhD;;AACA,UAAID,kBAAJ,EAAwB;AACpB7C,QAAAA,QAAQ,GAAG,KAAK+C,yBAAL,CAA+B,IAA/B,CAAX;AACH;;AACD,WAAK1E,KAAL,CAAWc,IAAI,CAAC6D,KAAhB;;AACA,UAAIH,kBAAJ,EAAwB;AACpB,aAAKI,wBAAL,CAA8BjD,QAA9B;AACH;AACJ;;;WAED,oBAAWb,IAAX,EAAiB;AAAA;;AACb,UAAIA,IAAI,CAACkB,IAAL,CAAUc,IAAV,KAAmBC,mBAAO8B,mBAA1B,IAAiD/D,IAAI,CAACkB,IAAL,CAAU8C,IAAV,KAAmB,KAAxE,EAA+E;AAC3E,aAAKC,mBAAL,CAAyBjE,IAAI,CAACyB,KAA9B,EAAqCzB,IAArC;AACA,aAAKd,KAAL,CAAWc,IAAI,CAACyB,KAAhB;AACA,aAAK0B,KAAL,CAAWnD,IAAI,CAACyB,KAAhB;AAEA,aAAKyC,yBAAL,CAA+BlE,IAA/B;AACA,aAAKd,KAAL,CAAWc,IAAI,CAACgD,IAAhB;AACA,aAAKG,KAAL,CAAWnD,IAAX;AACH,OARD,MAQO;AACH,YAAIA,IAAI,CAACkB,IAAL,CAAUc,IAAV,KAAmBC,mBAAO8B,mBAA9B,EAAmD;AAC/C,eAAK7E,KAAL,CAAWc,IAAI,CAACkB,IAAhB;AACA,eAAKzB,YAAL,CAAkBO,IAAI,CAACkB,IAAL,CAAUG,YAAV,CAAuB,CAAvB,EAA0B9B,EAA5C,EAAgD,UAACG,OAAD,EAAa;AACzD,YAAA,MAAI,CAACC,YAAL,GAAoB2B,aAApB,CAAkC5B,OAAlC,EAA2C6B,mBAAUC,KAArD,EAA4DxB,IAAI,CAACyB,KAAjE,EAAwE,IAAxE,EAA8E,IAA9E,EAAoF,IAApF;AACH,WAFD;AAGH,SALD,MAKO;AACH,eAAKhC,YAAL,CAAkBO,IAAI,CAACkB,IAAvB,EAA6B;AAAEa,YAAAA,qBAAqB,EAAE;AAAzB,WAA7B,EAA8D,UAACrC,OAAD,EAAUgD,IAAV,EAAmB;AAC7E,gBAAIf,mBAAmB,GAAG,IAA1B;;AACA,gBAAI,CAAC,MAAI,CAAChC,YAAL,GAAoBwE,QAAzB,EAAmC;AAC/BxC,cAAAA,mBAAmB,GAAG;AAClBjC,gBAAAA,OADkB;AAElBM,gBAAAA;AAFkB,eAAtB;AAIH;;AACD,YAAA,MAAI,CAAC6C,uBAAL,CAA6BnD,OAA7B,EAAsCgD,IAAI,CAAChB,WAA3C,EAAwDC,mBAAxD,EAA6E,KAA7E;;AACA,YAAA,MAAI,CAAChC,YAAL,GAAoB2B,aAApB,CAAkC5B,OAAlC,EAA2C6B,mBAAUC,KAArD,EAA4DxB,IAAI,CAACyB,KAAjE,EAAwEE,mBAAxE,EAA6F,IAA7F,EAAmG,KAAnG;AACH,WAVD;AAWH;;AACD,aAAKzC,KAAL,CAAWc,IAAI,CAACyB,KAAhB;AACA,aAAKvC,KAAL,CAAWc,IAAI,CAACgD,IAAhB;AACH;AACJ;;;WAED,kCAAyBoB,mBAAzB,EAA8CpC,IAA9C,EAAoDhC,IAApD,EAA0DqE,KAA1D,EAAiEC,OAAjE,EAA0E;AAAA;;AACtE;AACA,UAAMC,IAAI,GAAGvE,IAAI,CAACqB,YAAL,CAAkBgD,KAAlB,CAAb;AACA,UAAQzC,IAAR,GAAiB2C,IAAjB,CAAQ3C,IAAR;AACA,WAAKnC,YAAL,CAAkB8E,IAAI,CAAChF,EAAvB,EAA2B;AAAEwC,QAAAA,qBAAqB,EAAE,CAACuC;AAA1B,OAA3B,EAAgE,UAAC5E,OAAD,EAAUgD,IAAV,EAAmB;AAC/E0B,QAAAA,mBAAmB,CAACxE,QAApB,CAA6BF,OAA7B,EACI,IAAIG,sBAAJ,CACImC,IADJ,EAEItC,OAFJ,EAGI6E,IAHJ,EAIIvE,IAJJ,EAKIqE,KALJ,EAMIrE,IAAI,CAACgE,IANT,CADJ;;AAUA,YAAI,CAACM,OAAL,EAAc;AACV,UAAA,MAAI,CAACzB,uBAAL,CAA6BnD,OAA7B,EAAsCgD,IAAI,CAAChB,WAA3C,EAAwD,IAAxD,EAA8D,IAA9D;AACH;;AACD,YAAIE,IAAJ,EAAU;AACN,UAAA,MAAI,CAACjC,YAAL,GAAoB2B,aAApB,CAAkC5B,OAAlC,EAA2C6B,mBAAUC,KAArD,EAA4DI,IAA5D,EAAkE,IAAlE,EAAwE,CAACc,IAAI,CAAC8B,QAA9E,EAAwF,IAAxF;AACH;AACJ,OAjBD;AAkBH;;;WAED,8BAAqBxE,IAArB,EAA2B;AAAA;;AACvB,UAAIf,wBAAewF,SAAf,CAAyBzE,IAAI,CAACkB,IAA9B,CAAJ,EAAyC;AACrC,YAAIlB,IAAI,CAAC0E,QAAL,KAAkB,GAAtB,EAA2B;AACvB,eAAKjF,YAAL,CAAkBO,IAAI,CAACkB,IAAvB,EAA6B;AAAEa,YAAAA,qBAAqB,EAAE;AAAzB,WAA7B,EAA8D,UAACrC,OAAD,EAAUgD,IAAV,EAAmB;AAC7E,gBAAIf,mBAAmB,GAAG,IAA1B;;AACA,gBAAI,CAAC,MAAI,CAAChC,YAAL,GAAoBwE,QAAzB,EAAmC;AAC/BxC,cAAAA,mBAAmB,GAAG;AAClBjC,gBAAAA,OADkB;AAElBM,gBAAAA;AAFkB,eAAtB;AAIH;;AACD,YAAA,MAAI,CAAC6C,uBAAL,CAA6BnD,OAA7B,EAAsCgD,IAAI,CAAChB,WAA3C,EAAwDC,mBAAxD,EAA6E,KAA7E;;AACA,YAAA,MAAI,CAAChC,YAAL,GAAoB2B,aAApB,CAAkC5B,OAAlC,EAA2C6B,mBAAUC,KAArD,EAA4DxB,IAAI,CAACyB,KAAjE,EAAwEE,mBAAxE,EAA6F,CAACe,IAAI,CAAC8B,QAAnG,EAA6G,KAA7G;AACH,WAVD;AAWH,SAZD,MAYO;AACH,eAAK7E,YAAL,GAAoB2B,aAApB,CAAkCtB,IAAI,CAACkB,IAAvC,EAA6CK,mBAAUoD,EAAvD,EAA2D3E,IAAI,CAACyB,KAAhE;AACH;AACJ,OAhBD,MAgBO;AACH,aAAKvC,KAAL,CAAWc,IAAI,CAACkB,IAAhB;AACH;;AACD,WAAKhC,KAAL,CAAWc,IAAI,CAACyB,KAAhB;AACH;;;WAED,qBAAYzB,IAAZ,EAAkB;AAAA;;AACd,WAAKO,YAAL,CAAkBqE,gBAAlB,CAAmC5E,IAAnC;;AAEA,WAAKP,YAAL,CAAkBO,IAAI,CAAC6E,KAAvB,EAA8B;AAAE9C,QAAAA,qBAAqB,EAAE;AAAzB,OAA9B,EAA+D,UAACrC,OAAD,EAAUgD,IAAV,EAAmB;AAC9E,QAAA,MAAI,CAAC/C,YAAL,GAAoBC,QAApB,CAA6BF,OAA7B,EACI,IAAIG,sBAAJ,CACIC,kBAASgF,WADb,EAEI9E,IAAI,CAAC6E,KAFT,EAGI7E,IAHJ,EAII,IAJJ,EAKI,IALJ,EAMI,IANJ,CADJ;;AASA,QAAA,MAAI,CAAC6C,uBAAL,CAA6BnD,OAA7B,EAAsCgD,IAAI,CAAChB,WAA3C,EAAwD,IAAxD,EAA8D,IAA9D;AACH,OAXD;AAYA,WAAKxC,KAAL,CAAWc,IAAI,CAACgD,IAAhB;AAEA,WAAKG,KAAL,CAAWnD,IAAX;AACH;;;WAED,iBAAQA,IAAR,EAAc;AACV,WAAKO,YAAL,CAAkBwE,iBAAlB,CAAoC/E,IAApC;;AAEA,UAAI,KAAKO,YAAL,CAAkByE,eAAlB,EAAJ,EAAyC;AACrC;AACA,aAAKrF,YAAL,GAAoBwE,QAApB,GAA+B,KAA/B;;AACA,aAAK5D,YAAL,CAAkB+B,mBAAlB,CAAsCtC,IAAtC,EAA4C,KAA5C;AACH;;AAED,UAAI,KAAKO,YAAL,CAAkB0E,OAAlB,MAA+B,KAAK1E,YAAL,CAAkB2E,QAAlB,EAAnC,EAAiE;AAC7D,aAAK3E,YAAL,CAAkB4E,iBAAlB,CAAoCnF,IAApC;AACH;;AAED,UAAI,KAAKO,YAAL,CAAkB6E,qBAAlB,MAA6C,KAAK7E,YAAL,CAAkB8E,eAAlB,EAAjD,EAAsF;AAClF,aAAK1F,YAAL,GAAoBwE,QAApB,GAA+B,IAA/B;AACH;;AAED,WAAKjB,aAAL,CAAmBlD,IAAnB;AACA,WAAKmD,KAAL,CAAWnD,IAAX;AACH;;;WAED,oBAAWA,IAAX,EAAiB;AACb,WAAKL,YAAL,GAAoB2B,aAApB,CAAkCtB,IAAlC;AACH;;;WAED,0BAAiBA,IAAjB,EAAuB;AACnB,UAAIf,wBAAewF,SAAf,CAAyBzE,IAAI,CAAC+C,QAA9B,CAAJ,EAA6C;AACzC,aAAKpD,YAAL,GAAoB2B,aAApB,CAAkCtB,IAAI,CAAC+C,QAAvC,EAAiDxB,mBAAUoD,EAA3D,EAA+D,IAA/D;AACH,OAFD,MAEO;AACH,aAAKzB,aAAL,CAAmBlD,IAAnB;AACH;AACJ;;;WAED,0BAAiBA,IAAjB,EAAuB;AACnB,WAAKd,KAAL,CAAWc,IAAI,CAACsF,MAAhB;;AACA,UAAItF,IAAI,CAACwD,QAAT,EAAmB;AACf,aAAKtE,KAAL,CAAWc,IAAI,CAACuF,QAAhB;AACH;AACJ;;;WAED,kBAASvF,IAAT,EAAe;AACX,WAAKwF,aAAL,CAAmBxF,IAAnB;AACH;;;WAED,0BAAiBA,IAAjB,EAAuB;AACnB,WAAKwF,aAAL,CAAmBxF,IAAnB;AACH;;;WAED,0BAAiB,CAAE;;;WAEnB,6BAAoB,CAAE;;;WAEtB,0BAAiBA,IAAjB,EAAuB;AACnB,WAAKd,KAAL,CAAWc,IAAI,CAACgD,IAAhB;AACH;;;WAED,sBAAahD,IAAb,EAAmB;AACf;AACA;AACA;AACA;AACA,UAAIA,IAAI,CAAC4B,IAAL,IAAa5B,IAAI,CAAC4B,IAAL,CAAUI,IAAV,KAAmBC,mBAAO8B,mBAAvC,IAA8D/D,IAAI,CAAC4B,IAAL,CAAUoC,IAAV,KAAmB,KAArF,EAA4F;AACxF,aAAKzD,YAAL,CAAkBY,cAAlB,CAAiCnB,IAAjC;AACH;;AAED,WAAKkD,aAAL,CAAmBlD,IAAnB;AAEA,WAAKmD,KAAL,CAAWnD,IAAX;AACH;;;WAED,yBAAgBA,IAAhB,EAAsB;AAClB,WAAKyF,UAAL,CAAgBzF,IAAhB;AACH;;;WAED,0BAAiBA,IAAjB,EAAuB;AACnB,WAAKyF,UAAL,CAAgBzF,IAAhB;AACH;;;WAED,wBAAeA,IAAf,EAAqB;AACjB;AACA,UAAI,CAAC,KAAKO,YAAL,CAAkBmF,YAAlB,EAAD,IAAqC1F,IAAI,CAAC2F,MAAL,CAAY3D,IAAZ,KAAqBC,mBAAO2D,UAAjE,IAA+E5F,IAAI,CAAC2F,MAAL,CAAYxF,IAAZ,KAAqB,MAAxG,EAAgH;AAC5G;AACA;AACA,aAAKR,YAAL,GAAoBkG,aAApB,CAAkCC,YAAlC;AACH;;AACD,WAAK5C,aAAL,CAAmBlD,IAAnB;AACH;;;WAED,wBAAeA,IAAf,EAAqB;AACjB,UAAI,KAAKO,YAAL,CAAkB0E,OAAlB,EAAJ,EAAiC;AAC7B,aAAK1E,YAAL,CAAkBwF,gBAAlB,CAAmC/F,IAAnC;AACH;;AAED,WAAKkD,aAAL,CAAmBlD,IAAnB;AAEA,WAAKmD,KAAL,CAAWnD,IAAX;AACH;;;WAED,0BAAiB;AACb,WAAKL,YAAL,GAAoBkG,aAApB,CAAkCG,YAAlC;AACH;;;WAED,uBAAchG,IAAd,EAAoB;AAChB,WAAKd,KAAL,CAAWc,IAAI,CAACsF,MAAhB,EADgB,CAEhB;;AACA,WAAK/E,YAAL,CAAkB0F,eAAlB,CAAkCjG,IAAlC;;AAEA,WAAKd,KAAL,CAAWc,IAAI,CAACgD,IAAhB;AAEA,WAAKG,KAAL,CAAWnD,IAAX;AACH;;;WAED,6BAAoBA,IAApB,EAA0B;AACtB,UAAMoE,mBAAmB,GAAIpE,IAAI,CAACgE,IAAL,KAAc,KAAf,GAAwB,KAAKrE,YAAL,GAAoBkG,aAA5C,GAA4D,KAAKlG,YAAL,EAAxF;;AACA,WAAK,IAAI4C,CAAC,GAAG,CAAR,EAAWC,EAAE,GAAGxC,IAAI,CAACqB,YAAL,CAAkByB,MAAvC,EAA+CP,CAAC,GAAGC,EAAnD,EAAuD,EAAED,CAAzD,EAA4D;AACxD,YAAMgC,IAAI,GAAGvE,IAAI,CAACqB,YAAL,CAAkBkB,CAAlB,CAAb;AACA,aAAKvB,wBAAL,CAA8BoD,mBAA9B,EAAmDtE,kBAASA,QAA5D,EAAsEE,IAAtE,EAA4EuC,CAA5E;;AACA,YAAIgC,IAAI,CAAC3C,IAAT,EAAe;AACX,eAAK1C,KAAL,CAAWqF,IAAI,CAAC3C,IAAhB;AACH;AACJ;AACJ,K,CAED;;;;WACA,yBAAgB5B,IAAhB,EAAsB;AAClB,WAAKd,KAAL,CAAWc,IAAI,CAACkG,YAAhB;;AAEA,UAAI,KAAK3F,YAAL,CAAkB0E,OAAlB,EAAJ,EAAiC;AAC7B,aAAK1E,YAAL,CAAkB4F,iBAAlB,CAAoCnG,IAApC;AACH;;AALiB,iDAOAA,IAAI,CAACoG,KAPL;AAAA;;AAAA;AAOlB,4DAA8B;AAAA,cAAnBC,GAAmB;AAC1B,eAAKnH,KAAL,CAAWmH,GAAX;AACH;AATiB;AAAA;AAAA;AAAA;AAAA;;AAWlB,WAAKlD,KAAL,CAAWnD,IAAX;AACH;;;WAED,6BAAoBA,IAApB,EAA0B;AACtB,WAAKsG,aAAL,CAAmBtG,IAAnB;AACH;;;WAED,4BAAmBA,IAAnB,EAAyB;AACrB,WAAKsG,aAAL,CAAmBtG,IAAnB;AACH;;;WAED,wBAAeA,IAAf,EAAqB;AACjB,WAAKuG,UAAL,CAAgBvG,IAAhB;AACH;;;WAED,wBAAeA,IAAf,EAAqB;AACjB,WAAKuG,UAAL,CAAgBvG,IAAhB;AACH;;;WAED,iCAAwBA,IAAxB,EAA8B;AAC1B,WAAKsG,aAAL,CAAmBtG,IAAnB;AACH;;;WAED,2BAAkBA,IAAlB,EAAwB;AACpB,2BAAO,KAAKO,YAAL,CAAkB0E,OAAlB,MAA+B,KAAK1E,YAAL,CAAkB2E,QAAlB,EAAtC,EAAoE,iFAApE;AAEA,UAAMsB,QAAQ,GAAG,IAAInH,QAAJ,CAAaW,IAAb,EAAmB,IAAnB,CAAjB;AACAwG,MAAAA,QAAQ,CAACtH,KAAT,CAAec,IAAf;AACH;;;WAED,gCAAuBA,IAAvB,EAA6B;AACzB,UAAIA,IAAI,CAACyG,MAAT,EAAiB;AACb;AACH;;AACD,UAAIzG,IAAI,CAACV,WAAT,EAAsB;AAClB,aAAKJ,KAAL,CAAWc,IAAI,CAACV,WAAhB;AACA;AACH;;AAED,WAAK4D,aAAL,CAAmBlD,IAAnB;AACH;;;WAED,2BAAkBA,IAAlB,EAAwB;AACpB,WAAK0G,sBAAL,CAA4B1G,IAA5B;AACH;;;WAED,gCAAuBA,IAAvB,EAA6B;AACzB,WAAK0G,sBAAL,CAA4B1G,IAA5B;AACH;;;WAED,yBAAgBA,IAAhB,EAAsB;AAClB,UAAMC,KAAK,GAAID,IAAI,CAACT,EAAL,IAAWS,IAAI,CAACC,KAA/B;AACA,WAAKf,KAAL,CAAWe,KAAX;AACH;;;WAED,wBAAe,CACX;AACH;;;;EA/dmCG,mBAAUC,O;AAkelD","sourcesContent":["/*\n  Copyright (C) 2015 Yusuke Suzuki <utatane.tea@gmail.com>\n\n  Redistribution and use in source and binary forms, with or without\n  modification, are permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\nimport { Syntax } from 'estraverse';\nimport esrecurse from 'esrecurse';\nimport Reference from './reference.js';\nimport Variable from './variable.js';\nimport PatternVisitor from './pattern-visitor.js';\nimport { ParameterDefinition, Definition } from './definition.js';\nimport assert from 'assert';\n\nfunction traverseIdentifierInPattern(options, rootPattern, referencer, callback) {\n    // Call the callback at left hand identifier nodes, and Collect right hand nodes.\n    const visitor = new PatternVisitor(options, rootPattern, callback);\n    visitor.visit(rootPattern);\n\n    // Process the right hand nodes recursively.\n    if (referencer != null) {\n        visitor.rightHandNodes.forEach(referencer.visit, referencer);\n    }\n}\n\n// Importing ImportDeclaration.\n// http://people.mozilla.org/~jorendorff/es6-draft.html#sec-moduledeclarationinstantiation\n// https://github.com/estree/estree/blob/master/es6.md#importdeclaration\n// FIXME: Now, we don't create module environment, because the context is\n// implementation dependent.\n\nclass Importer extends esrecurse.Visitor {\n    constructor(declaration, referencer) {\n        super(null, referencer.options);\n        this.declaration = declaration;\n        this.referencer = referencer;\n    }\n\n    visitImport(id, specifier) {\n        this.referencer.visitPattern(id, (pattern) => {\n            this.referencer.currentScope().__define(pattern,\n                new Definition(\n                    Variable.ImportBinding,\n                    pattern,\n                    specifier,\n                    this.declaration,\n                    null,\n                    null\n                ));\n        });\n    }\n\n    ImportNamespaceSpecifier(node) {\n        const local = (node.local || node.id);\n        if (local) {\n            this.visitImport(local, node);\n        }\n    }\n\n    ImportDefaultSpecifier(node) {\n        const local = (node.local || node.id);\n        this.visitImport(local, node);\n    }\n\n    ImportSpecifier(node) {\n        const local = (node.local || node.id);\n        if (node.name) {\n            this.visitImport(node.name, node);\n        } else {\n            this.visitImport(local, node);\n        }\n    }\n}\n\n// Referencing variables and creating bindings.\nexport default class Referencer extends esrecurse.Visitor {\n    constructor(options, scopeManager) {\n        super(null, options);\n        this.options = options;\n        this.scopeManager = scopeManager;\n        this.parent = null;\n        this.isInnerMethodDefinition = false;\n    }\n\n    currentScope() {\n        return this.scopeManager.__currentScope;\n    }\n\n    close(node) {\n        while (this.currentScope() && node === this.currentScope().block) {\n            this.scopeManager.__currentScope = this.currentScope().__close(this.scopeManager);\n        }\n    }\n\n    pushInnerMethodDefinition(isInnerMethodDefinition) {\n        const previous = this.isInnerMethodDefinition;\n        this.isInnerMethodDefinition = isInnerMethodDefinition;\n        return previous;\n    }\n\n    popInnerMethodDefinition(isInnerMethodDefinition) {\n        this.isInnerMethodDefinition = isInnerMethodDefinition;\n    }\n\n    materializeTDZScope(node, iterationNode) {\n        // http://people.mozilla.org/~jorendorff/es6-draft.html#sec-runtime-semantics-forin-div-ofexpressionevaluation-abstract-operation\n        // TDZ scope hides the declaration's names.\n        this.scopeManager.__nestTDZScope(node, iterationNode);\n        this.visitVariableDeclaration(this.currentScope(), Variable.TDZ, iterationNode.left, 0, true);\n    }\n\n    materializeIterationScope(node) {\n        // Generate iteration scope for upper ForIn/ForOf Statements.\n        this.scopeManager.__nestForScope(node);\n        const letOrConstDecl = node.left;\n        this.visitVariableDeclaration(this.currentScope(), Variable.Variable, letOrConstDecl, 0);\n        this.visitPattern(letOrConstDecl.declarations[0].id, (pattern) => {\n            this.currentScope().__referencing(pattern, Reference.WRITE, node.right, null, true, true);\n        });\n    }\n\n    referencingDefaultValue(pattern, assignments, maybeImplicitGlobal, init) {\n        const scope = this.currentScope();\n        assignments.forEach(assignment => {\n            scope.__referencing(\n                pattern,\n                Reference.WRITE,\n                assignment.right,\n                maybeImplicitGlobal,\n                pattern !== assignment.left,\n                init);\n        });\n    }\n\n    visitPattern(node, options, callback) {\n        if (typeof options === 'function') {\n            callback = options;\n            options = { processRightHandNodes: false };\n        }\n        traverseIdentifierInPattern(\n            this.options,\n            node,\n            options.processRightHandNodes ? this : null,\n            callback);\n    }\n\n    visitFunction(node) {\n        // FunctionDeclaration name is defined in upper scope\n        // NOTE: Not referring variableScope. It is intended.\n        // Since\n        //  in ES5, FunctionDeclaration should be in FunctionBody.\n        //  in ES6, FunctionDeclaration should be block scoped.\n        if (node.type === Syntax.FunctionDeclaration) {\n            // id is defined in upper scope\n            this.currentScope().__define(node.id,\n                new Definition(\n                    Variable.FunctionName,\n                    node.id,\n                    node,\n                    null,\n                    null,\n                    null\n                ));\n        }\n\n        // FunctionExpression with name creates its special scope;\n        // FunctionExpressionNameScope.\n        if (node.type === Syntax.FunctionExpression && node.id) {\n            this.scopeManager.__nestFunctionExpressionNameScope(node);\n        }\n\n        // Consider this function is in the MethodDefinition.\n        this.scopeManager.__nestFunctionScope(node, this.isInnerMethodDefinition);\n\n        // Process parameter declarations.\n        for (let i = 0, iz = node.params.length; i < iz; ++i) {\n            this.visitPattern(node.params[i], { processRightHandNodes: true }, (pattern, info) => {\n                this.currentScope().__define(pattern,\n                    new ParameterDefinition(\n                        pattern,\n                        node,\n                        i,\n                        info.rest\n                    ));\n\n                this.referencingDefaultValue(pattern, info.assignments, null, true);\n            });\n        }\n\n        // if there's a rest argument, add that\n        if (node.rest) {\n            this.visitPattern({\n                type: 'RestElement',\n                argument: node.rest\n            }, (pattern) => {\n                this.currentScope().__define(pattern,\n                    new ParameterDefinition(\n                        pattern,\n                        node,\n                        node.params.length,\n                        true\n                    ));\n            });\n        }\n\n        // Skip BlockStatement to prevent creating BlockStatement scope.\n        if (node.body.type === Syntax.BlockStatement) {\n            this.visitChildren(node.body);\n        } else {\n            this.visit(node.body);\n        }\n\n        this.close(node);\n    }\n\n    visitClass(node) {\n        if (node.type === Syntax.ClassDeclaration) {\n            this.currentScope().__define(node.id,\n                new Definition(\n                    Variable.ClassName,\n                    node.id,\n                    node,\n                    null,\n                    null,\n                    null\n                ));\n        }\n\n        // FIXME: Maybe consider TDZ.\n        this.visit(node.superClass);\n\n        this.scopeManager.__nestClassScope(node);\n\n        if (node.id) {\n            this.currentScope().__define(node.id,\n                new Definition(\n                    Variable.ClassName,\n                    node.id,\n                    node\n                ));\n        }\n        this.visit(node.body);\n\n        this.close(node);\n    }\n\n    visitProperty(node) {\n        let previous;\n        if (node.computed) {\n            this.visit(node.key);\n        }\n\n        const isMethodDefinition = node.type === Syntax.MethodDefinition;\n        if (isMethodDefinition) {\n            previous = this.pushInnerMethodDefinition(true);\n        }\n        this.visit(node.value);\n        if (isMethodDefinition) {\n            this.popInnerMethodDefinition(previous);\n        }\n    }\n\n    visitForIn(node) {\n        if (node.left.type === Syntax.VariableDeclaration && node.left.kind !== 'var') {\n            this.materializeTDZScope(node.right, node);\n            this.visit(node.right);\n            this.close(node.right);\n\n            this.materializeIterationScope(node);\n            this.visit(node.body);\n            this.close(node);\n        } else {\n            if (node.left.type === Syntax.VariableDeclaration) {\n                this.visit(node.left);\n                this.visitPattern(node.left.declarations[0].id, (pattern) => {\n                    this.currentScope().__referencing(pattern, Reference.WRITE, node.right, null, true, true);\n                });\n            } else {\n                this.visitPattern(node.left, { processRightHandNodes: true }, (pattern, info) => {\n                    let maybeImplicitGlobal = null;\n                    if (!this.currentScope().isStrict) {\n                        maybeImplicitGlobal = {\n                            pattern,\n                            node\n                        };\n                    }\n                    this.referencingDefaultValue(pattern, info.assignments, maybeImplicitGlobal, false);\n                    this.currentScope().__referencing(pattern, Reference.WRITE, node.right, maybeImplicitGlobal, true, false);\n                });\n            }\n            this.visit(node.right);\n            this.visit(node.body);\n        }\n    }\n\n    visitVariableDeclaration(variableTargetScope, type, node, index, fromTDZ) {\n        // If this was called to initialize a TDZ scope, this needs to make definitions, but doesn't make references.\n        const decl = node.declarations[index];\n        const { init } = decl;\n        this.visitPattern(decl.id, { processRightHandNodes: !fromTDZ }, (pattern, info) => {\n            variableTargetScope.__define(pattern,\n                new Definition(\n                    type,\n                    pattern,\n                    decl,\n                    node,\n                    index,\n                    node.kind\n                ));\n\n            if (!fromTDZ) {\n                this.referencingDefaultValue(pattern, info.assignments, null, true);\n            }\n            if (init) {\n                this.currentScope().__referencing(pattern, Reference.WRITE, init, null, !info.topLevel, true);\n            }\n        });\n    }\n\n    AssignmentExpression(node) {\n        if (PatternVisitor.isPattern(node.left)) {\n            if (node.operator === '=') {\n                this.visitPattern(node.left, { processRightHandNodes: true }, (pattern, info) => {\n                    let maybeImplicitGlobal = null;\n                    if (!this.currentScope().isStrict) {\n                        maybeImplicitGlobal = {\n                            pattern,\n                            node\n                        };\n                    }\n                    this.referencingDefaultValue(pattern, info.assignments, maybeImplicitGlobal, false);\n                    this.currentScope().__referencing(pattern, Reference.WRITE, node.right, maybeImplicitGlobal, !info.topLevel, false);\n                });\n            } else {\n                this.currentScope().__referencing(node.left, Reference.RW, node.right);\n            }\n        } else {\n            this.visit(node.left);\n        }\n        this.visit(node.right);\n    }\n\n    CatchClause(node) {\n        this.scopeManager.__nestCatchScope(node);\n\n        this.visitPattern(node.param, { processRightHandNodes: true }, (pattern, info) => {\n            this.currentScope().__define(pattern,\n                new Definition(\n                    Variable.CatchClause,\n                    node.param,\n                    node,\n                    null,\n                    null,\n                    null\n                ));\n            this.referencingDefaultValue(pattern, info.assignments, null, true);\n        });\n        this.visit(node.body);\n\n        this.close(node);\n    }\n\n    Program(node) {\n        this.scopeManager.__nestGlobalScope(node);\n\n        if (this.scopeManager.__isNodejsScope()) {\n            // Force strictness of GlobalScope to false when using node.js scope.\n            this.currentScope().isStrict = false;\n            this.scopeManager.__nestFunctionScope(node, false);\n        }\n\n        if (this.scopeManager.__isES6() && this.scopeManager.isModule()) {\n            this.scopeManager.__nestModuleScope(node);\n        }\n\n        if (this.scopeManager.isStrictModeSupported() && this.scopeManager.isImpliedStrict()) {\n            this.currentScope().isStrict = true;\n        }\n\n        this.visitChildren(node);\n        this.close(node);\n    }\n\n    Identifier(node) {\n        this.currentScope().__referencing(node);\n    }\n\n    UpdateExpression(node) {\n        if (PatternVisitor.isPattern(node.argument)) {\n            this.currentScope().__referencing(node.argument, Reference.RW, null);\n        } else {\n            this.visitChildren(node);\n        }\n    }\n\n    MemberExpression(node) {\n        this.visit(node.object);\n        if (node.computed) {\n            this.visit(node.property);\n        }\n    }\n\n    Property(node) {\n        this.visitProperty(node);\n    }\n\n    MethodDefinition(node) {\n        this.visitProperty(node);\n    }\n\n    BreakStatement() {}\n\n    ContinueStatement() {}\n\n    LabeledStatement(node) {\n        this.visit(node.body);\n    }\n\n    ForStatement(node) {\n        // Create ForStatement declaration.\n        // NOTE: In ES6, ForStatement dynamically generates\n        // per iteration environment. However, escope is\n        // a static analyzer, we only generate one scope for ForStatement.\n        if (node.init && node.init.type === Syntax.VariableDeclaration && node.init.kind !== 'var') {\n            this.scopeManager.__nestForScope(node);\n        }\n\n        this.visitChildren(node);\n\n        this.close(node);\n    }\n\n    ClassExpression(node) {\n        this.visitClass(node);\n    }\n\n    ClassDeclaration(node) {\n        this.visitClass(node);\n    }\n\n    CallExpression(node) {\n        // Check this is direct call to eval\n        if (!this.scopeManager.__ignoreEval() && node.callee.type === Syntax.Identifier && node.callee.name === 'eval') {\n            // NOTE: This should be `variableScope`. Since direct eval call always creates Lexical environment and\n            // let / const should be enclosed into it. Only VariableDeclaration affects on the caller's environment.\n            this.currentScope().variableScope.__detectEval();\n        }\n        this.visitChildren(node);\n    }\n\n    BlockStatement(node) {\n        if (this.scopeManager.__isES6()) {\n            this.scopeManager.__nestBlockScope(node);\n        }\n\n        this.visitChildren(node);\n\n        this.close(node);\n    }\n\n    ThisExpression() {\n        this.currentScope().variableScope.__detectThis();\n    }\n\n    WithStatement(node) {\n        this.visit(node.object);\n        // Then nest scope for WithStatement.\n        this.scopeManager.__nestWithScope(node);\n\n        this.visit(node.body);\n\n        this.close(node);\n    }\n\n    VariableDeclaration(node) {\n        const variableTargetScope = (node.kind === 'var') ? this.currentScope().variableScope : this.currentScope();\n        for (let i = 0, iz = node.declarations.length; i < iz; ++i) {\n            const decl = node.declarations[i];\n            this.visitVariableDeclaration(variableTargetScope, Variable.Variable, node, i);\n            if (decl.init) {\n                this.visit(decl.init);\n            }\n        }\n    }\n\n    // sec 13.11.8\n    SwitchStatement(node) {\n        this.visit(node.discriminant);\n\n        if (this.scopeManager.__isES6()) {\n            this.scopeManager.__nestSwitchScope(node);\n        }\n\n        for (const cse of node.cases) {\n            this.visit(cse);\n        }\n\n        this.close(node);\n    }\n\n    FunctionDeclaration(node) {\n        this.visitFunction(node);\n    }\n\n    FunctionExpression(node) {\n        this.visitFunction(node);\n    }\n\n    ForOfStatement(node) {\n        this.visitForIn(node);\n    }\n\n    ForInStatement(node) {\n        this.visitForIn(node);\n    }\n\n    ArrowFunctionExpression(node) {\n        this.visitFunction(node);\n    }\n\n    ImportDeclaration(node) {\n        assert(this.scopeManager.__isES6() && this.scopeManager.isModule(), 'ImportDeclaration should appear when the mode is ES6 and in the module context.');\n\n        const importer = new Importer(node, this);\n        importer.visit(node);\n    }\n\n    visitExportDeclaration(node) {\n        if (node.source) {\n            return;\n        }\n        if (node.declaration) {\n            this.visit(node.declaration);\n            return;\n        }\n\n        this.visitChildren(node);\n    }\n\n    ExportDeclaration(node) {\n        this.visitExportDeclaration(node);\n    }\n\n    ExportNamedDeclaration(node) {\n        this.visitExportDeclaration(node);\n    }\n\n    ExportSpecifier(node) {\n        const local = (node.id || node.local);\n        this.visit(local);\n    }\n\n    MetaProperty() {\n        // do nothing.\n    }\n}\n\n/* vim: set sw=4 ts=4 et tw=80 : */\n"],"file":"referencer.js"}